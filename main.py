from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import os
import json
from datetime import datetime, timedelta, time

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env —Ñ–∞–π–ª—É
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_CHAT_ID = os.getenv('GROUP_CHAT_ID')

if not BOT_TOKEN or not GROUP_CHAT_ID:
    print("–ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –∞–±–æ GROUP_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env.")
    exit(1)

try:
    GROUP_CHAT_ID = int(GROUP_CHAT_ID)  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
except ValueError:
    print("–ü–æ–º–∏–ª–∫–∞: GROUP_CHAT_ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º.")
    exit(1)

user_states = {}

def load_schedule():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É –∑ JSON-—Ñ–∞–π–ª—É.
    """
    try:
        with open("schedule.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤
PREACHERS = [
    "–ë–∞—Å—å–∫–æ –ü.", "–ë—ñ–ª–µ–Ω–∫–æ –Æ.", "–ú–æ—Å—ñ–π—á—É–∫ –í.", "–ú–∏—Ä–æ–Ω–µ–Ω–∫–æ –Ü.",
    "–ë–∞—Ä–∞–Ω–æ–≤—Å—å–∫–∏–π –ú.", "–ü–æ–Ω–æ–º–∞—Ä—å–æ–≤ –ê.", "–ó–∞–º—É—Ä—É—î–≤ –í.", "–ì—Ä–∏–≥–æ—Ä–æ–≤ –ê.",
    "–°–∞–≤–æ—Å—Ç—ñ–Ω –í.", "–ö–æ–∑–∞–∫ –Ñ.", "–ö—É–ª–∏–∫ –Ñ.", "–ö–æ–≤–∞–ª—å—á—É–∫ –Æ.",
    "–°–∞–≤–æ—Å—Ç—ñ–Ω –Ü.", "–°—É—Ä–∂–∞ –ü.", "–ö—ñ—Ç—á–µ–Ω–∫–æ –Ø.", "–í–æ–ª–æ—Å –í.",
    "–°–∞—Ä–¥–∞–∫ –†."
]

# –ú–∞–ø–∞ —Å–∫–æ—Ä–æ—á–µ–Ω—å –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
SHORT_DAYS_OF_WEEK = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –≥—Ä—É–ø—ñ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = """
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º
/add - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø—Ä–æ–ø–æ–≤—ñ–¥—å
/end - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä–æ–ø–æ–≤—ñ–¥–µ–π
"""
    await update.message.reply_text(commands)



async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–æ–ø–æ–≤—ñ–¥—ñ (DD.MM.YYYY):")
    user_states[update.effective_user.id] = "waiting_for_date"

def save_schedule(new_entry):
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ JSON-—Ñ–∞–π–ª—É, –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏ –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤ –Ω–∞ –æ–¥–Ω—É –¥–∞—Ç—É.
    """
    schedule = load_schedule()
    for date, preacher in new_entry.items():
        if date in schedule:
            if isinstance(schedule[date], list):
                if preacher not in schedule[date]:
                    schedule[date].append(preacher)
            else:
                if schedule[date] != preacher:
                    schedule[date] = [schedule[date], preacher]
        else:
            schedule[date] = [preacher]

    with open("schedule.json", "w", encoding="utf-8") as f:
        json.dump(schedule, f, ensure_ascii=False, indent=4)



async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id in user_states:
        state = user_states[user_id]

        if state == "waiting_for_date":
            date = update.message.text
            try:
                parsed_date = datetime.strptime(date, "%d.%m.%Y")
                formatted_date = parsed_date.strftime("%d.%m.%Y")

                user_states[user_id] = {"state": "waiting_for_preacher", "date": formatted_date}
                keyboard = [[KeyboardButton(name)] for name in PREACHERS]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∞:", reply_markup=reply_markup)
            except ValueError:
                await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:")

        elif state.get("state") == "waiting_for_preacher":
            preacher = update.message.text
            date = state["date"]

            new_entry = {date: preacher}
            save_schedule(new_entry)

            schedule = load_schedule()
            propov_idniki = ", ".join(schedule[date])
            await update.message.reply_text(f"–ü—Ä–æ–ø–æ–≤—ñ–¥—å –Ω–∞ {date} –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∏: {propov_idniki}")

            
            del user_states[user_id]

async def end_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = load_schedule()
    if not schedule:
        await update.message.reply_text("–†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    result = "*–†–æ–∑–∫–ª–∞–¥ –ø—Ä–æ–ø–æ–≤—ñ–¥–µ–π:*\n\n"
    for date, preacher in sorted(schedule.items()):
        day_of_week = SHORT_DAYS_OF_WEEK[datetime.strptime(date, "%d.%m.%Y").weekday()]
        result += f"- {date} ({day_of_week}): {preacher}\n"

    await update.message.reply_text(result, parse_mode="Markdown")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"Chat ID —Ü—ñ—î—ó –≥—Ä—É–ø–∏: {chat_id}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")


async def test_reminder(context: ContextTypes.DEFAULT_TYPE):
    try:
        print("–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è test_reminder")
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="–¢–µ—Å—Ç–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î!", parse_mode="Markdown")
        print("–¢–µ—Å—Ç–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —É test_reminder: {e}")

# async def repeat_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """
#     Repeat a message in a Telegram chat.

#     Args:
#         update (telegram.Update): Telegram update object
#         context (telegram.ext.CallbackContext): Telegram context object
#     """
#     try:
#         message = update.message.text
#         chat_id = update.message.chat.id
#         await context.bot.send_message(chat_id=chat_id, text=message)
#     except Exception as e:
#         print(f"Error repeating message: {e}")

# async def remind(context: ContextTypes.DEFAULT_TYPE):
#     schedule = load_schedule()
#     current_time = datetime.now()
#     for date, preachers in schedule.items():
#         assigned_date = datetime.strptime(date, "%d.%m.%Y")
#         reminder_time = assigned_date - timedelta(hours=36)
#         if current_time >= reminder_time:
#             message = f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ù–∞—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–ø–æ–≤—ñ–¥—É—é—Ç—å: {', '.join(preachers)}"
#             await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)
#     return

# async def remind(context: ContextTypes.DEFAULT_TYPE):
#     schedule = load_schedule()
#     current_time = datetime.now()
#     current_day = current_time.weekday()
#     current_hour = current_time.hour
#     if (current_day == 2 and current_hour == 9) or (current_day == 5 and current_hour == 9):
#         if current_day == 2:
#             tomorrow = current_time.date() + timedelta(days=1)
#             tomorrow_str = tomorrow.strftime("%d.%m.%Y")
#             if tomorrow_str in schedule:
#                 message = f"–ó–∞–≤—Ç—Ä–∞ –ø—Ä–æ–ø–æ–≤—ñ–¥—É—î: {', '.join(schedule[tomorrow_str])}"
#                 await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)
#         elif current_day == 5:
#             sunday = current_time.date() + timedelta(days=2)
#             sunday_str = sunday.strftime("%d.%m.%Y")
#             if sunday_str in schedule:
#                 message = f"–ù–µ–¥—ñ–ª—è –ø—Ä–æ–ø–æ–≤—ñ–¥—É—î: {', '.join(schedule[sunday_str])}"
#                 await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)
#     return

async def remind(context: ContextTypes.DEFAULT_TYPE):
    print()
    try:
        schedule = load_schedule()
        current_time = datetime.now()

        # –°–µ—Ä–µ–¥–∞ - –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —á–µ—Ç–≤–µ—Ä
        if current_time.weekday() == 2:  # –°–µ—Ä–µ–¥–∞
            tomorrow = current_time.date() + timedelta(days=1)
            tomorrow_str = tomorrow.strftime("%d.%m.%Y")
            if tomorrow_str in schedule:
                message = f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞–≤—Ç—Ä–∞ –ø—Ä–æ–ø–æ–≤—ñ–¥—É—é—Ç—å: {', '.join(schedule[tomorrow_str])}."
                await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

        # –°—É–±–æ—Ç–∞ - –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ –Ω–µ–¥—ñ–ª—é
        elif current_time.weekday() == 5:  # –°—É–±–æ—Ç–∞
            sunday = current_time.date() + timedelta(days=2)
            sunday_str = sunday.strftime("%d.%m.%Y")
            if sunday_str in schedule:
                message = f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –£ –Ω–µ–¥—ñ–ª—é –ø—Ä–æ–ø–æ–≤—ñ–¥—É—é—Ç—å: {', '.join(schedule[sunday_str])}."
                await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —É —Ñ—É–Ω–∫—Ü—ñ—ó remind: {e}")


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add", add_command))
    application.add_handler(CommandHandler("end", end_command))
    application.add_handler(CommandHandler("get_chat_id", get_chat_id))
    application.add_error_handler(error_handler)
    
    # application.job_queue.run_daily(remind, time=time(datetime.now().hour, datetime.now().minute + 1), days=(datetime.now().weekday(),))
    # application.job_queue.run_daily(remind, time=time(9, 0), days=(2, 5))
    application.job_queue.run_repeating(remind, interval=10, name='remind_job')
    # application.job_queue.run_daily(remind, time=datetime.time(9, 0), days=(2, 5))
    # application.job_queue.run_daily(remind, time=datetime.time(9, 0), days=(2, 5))
    # application.job_queue.run_repeating(remind, interval=3600, name='remind_job')
    # application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, repeat_message))
  
    application.run_polling()

if __name__ == "__main__":
    main()
