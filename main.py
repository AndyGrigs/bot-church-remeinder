from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import os
import json
from datetime import datetime

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env —Ñ–∞–π–ª—É
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

user_states = {}

def load_schedule():
    try:
        with open("schedule.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É —É —Ñ–∞–π–ª
def save_schedule(schedule):
    with open("schedule.json", "w", encoding="utf-8") as f:
        json.dump(schedule, f, ensure_ascii=False, indent=4)

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤
PREACHERS =  [
    "–ë–∞—Å—å–∫–æ –ü.", "–ë—ñ–ª–µ–Ω–∫–æ –Æ.", "–ú–æ—Å—ñ–π—á—É–∫ –í.", "–ú–∏—Ä–æ–Ω–µ–Ω–∫–æ –Ü.",
    "–ë–∞—Ä–∞–Ω–æ–≤—Å—å–∫–∏–π –ú.", "–ü–æ–Ω–æ–º–∞—Ä—å–æ–≤ –ê.", "–ó–∞–º—É—Ä—É—î–≤ –í.", "–ì—Ä–∏–≥–æ—Ä–æ–≤ –ê.",
    "–°–∞–≤–æ—Å—Ç—ñ–Ω –í.", "–ö–æ–∑–∞–∫ –Ñ.", "–ö—É–ª–∏–∫ –Ñ.", "–ö–æ–≤–∞–ª—å—á—É–∫ –Æ.",
    "–°–∞–≤–æ—Å—Ç—ñ–Ω –Ü.", "–°—É—Ä–∂–∞ –ü.", "–ö—ñ—Ç—á–µ–Ω–∫–æ –Ø.", "–í–æ–ª–æ—Å –í.",
    "–°–∞—Ä–¥–∞–∫ –†."
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –Ø —Ü–µ—Ä–∫–æ–≤–Ω–∏–π –±–æ—Ç. –Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤ –≤ –∑—ñ–±—Ä–∞–Ω–Ω—ñ).")

async def reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ –∑–∞–±—É–¥—å—Ç–µ, —â–æ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è —É –Ω–∞—Å –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —Ü–µ—Ä–∫–æ–≤–Ω–∏–π –∑–∞—Ö—ñ–¥!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥"""
    commands = """
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º
/reminder - –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞—Ö—ñ–¥
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
/add - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø—Ä–æ–ø–æ–≤—ñ–¥—å
/end - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ø—Ä–æ–ø–æ–≤—ñ–¥–µ–π
"""
    await update.message.reply_text(commands)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –ø—Ä–æ–ø–æ–≤—ñ–¥—ñ
async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–æ–ø–æ–≤—ñ–¥—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 01.01.2025, —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:")
    user_states[update.effective_user.id] = "waiting_for_date"

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id in user_states:
        state = user_states[user_id]

        if state == "waiting_for_date":
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
            date = update.message.text
            try:
                # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤–≤–µ–¥–µ–Ω—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
                parsed_date = datetime.strptime(date, "%d.%m.%Y")
                formatted_date = parsed_date.strftime("%d.%m.%Y")

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É —ñ —á–µ–∫–∞—î–º–æ –≤–∏–±–æ—Ä—É –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∞
                user_states[user_id] = {"state": "waiting_for_preacher", "date": formatted_date}

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤
                keyboard = [[KeyboardButton(name)] for name in PREACHERS]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∞:", reply_markup=reply_markup)

            except ValueError:
                await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å.—Ä—ñ–∫) DD.MM.YYYY:")

        elif state.get("state") == "waiting_for_preacher":
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∞
            preacher = update.message.text
            date = state["date"]

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
            schedule = load_schedule()

            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
            schedule[date] = preacher
            save_schedule(schedule)

            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await update.message.reply_text(f"–ü—Ä–æ–ø–æ–≤—ñ–¥—å –Ω–∞ {date} –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫: {preacher}")
            
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
            del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∞–±–ª–∏—Ü—ñ
# async def end_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     schedule = load_schedule()

#     if not schedule:
#         await update.message.reply_text("–†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
#         return

#     # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –≤ Markdown
#     table = "| –î–∞—Ç–∞       | –ü—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫     |\n"
#     table += "|------------|-----------------|\n"
#     for date, preacher in sorted(schedule.items()):
#         table += f"| {date} | {preacher} |\n"

#     # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
#     await update.message.reply_text(f"–û—Å—å —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä–æ–ø–æ–≤—ñ–¥–µ–π:\n\n```\n{table}\n```", parse_mode="Markdown")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
# async def end_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     schedule = load_schedule()

#     if not schedule:
#         await update.message.reply_text("–†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
#         return

#     # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –¥–∞—Ç —ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
#     dates = sorted(set(schedule.keys()))

#     # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ
#     header = "| –Ü–º'—è               | " + " | ".join(dates) + " |\n"
#     header += "|--------------------|" + "|".join(["----------"] * len(dates)) + "|\n"

#     # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∞
#     rows = []
#     for preacher in PREACHERS:
#         row = [preacher]  # –ü–æ—á–∏–Ω–∞—î–º–æ —Ä—è–¥–æ–∫ —ñ–∑ —ñ–º–µ–Ω—ñ
#         for date in dates:
#             # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫ –º–∞—î –∑–∞–ø–∏—Å –Ω–∞ —Ü—é –¥–∞—Ç—É
#             if schedule.get(date) == preacher:
#                 row.append("üü°")
#             else:
#                 row.append(" ")
#         rows.append("| " + " | ".join(row) + " |")

#     # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é
#     table = header + "\n".join(rows)

#     # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
#     await update.message.reply_text(f"–û—Å—å —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä–æ–ø–æ–≤—ñ–¥–µ–π:\n\n```\n{table}\n```", parse_mode="Markdown")
# –ú–∞–ø–∞ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
# –ú–∞–ø–∞ —Å–∫–æ—Ä–æ—á–µ–Ω—å –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
SHORT_DAYS_OF_WEEK = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]

# –§—ñ–∫—Å–æ–≤–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Å—Ç–æ–≤–ø—Ü—ñ–≤
COLUMN_WIDTH = 5

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
async def end_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = load_schedule()

    if not schedule:
        await update.message.reply_text("–†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –¥–∞—Ç —ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    dates = sorted(set(schedule.keys()))

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ
    header = f"| {'–Ü–º\'—è':<17} | " + " | ".join(f"{datetime.strptime(date, '%d.%m.%Y').strftime('%d.%m'):<{COLUMN_WIDTH}}" for date in dates) + " |\n"
    separator = "|-------------------|" + "|".join(["-" * COLUMN_WIDTH] * len(dates)) + "|\n"
    days_row = f"| {'–î–µ–Ω—å —Ç–∏–∂–Ω—è':<17} | " + " | ".join(
        f"{SHORT_DAYS_OF_WEEK[datetime.strptime(date, '%d.%m.%Y').weekday()]:<{COLUMN_WIDTH}}" for date in dates
    ) + " |\n"

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∞
    rows = []
    for preacher in PREACHERS:
        row = [f"{preacher:<17}"]  # –Ü–º'—è –ø—Ä–æ–ø–æ–≤—ñ–¥–Ω–∏–∫–∞
        for date in dates:
            if schedule.get(date) == preacher:
                row.append("üü°".center(COLUMN_WIDTH))  # –ñ–æ–≤—Ç–∏–π –∫—Ä—É–≥ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤
            else:
                row.append(" ".center(COLUMN_WIDTH))  # –ü–æ—Ä–æ–∂–Ω—è –∫–æ–º—ñ—Ä–∫–∞
        rows.append("| " + " | ".join(row) + " |")

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é
    table = header + separator + days_row + separator + "\n".join(rows)

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
    await update.message.reply_text(f"```\n{table}\n```", parse_mode="Markdown")


def main():
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –¥–æ –±–æ—Ç–∞
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reminder", reminder))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add", add_command))
    application.add_handler(CommandHandler("end", end_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
